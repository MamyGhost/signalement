#!/bin/bash
age=5
if [ "$age" -eq 10 ]; then
echo "x = 10."
else
echo "x != 10."
fi

(Syntax)


read n
case "$n" in
0) echo "zero"
;;
1) echo "un"
;;
2) echo "deux"
echo "deux"
;;
read n
case "$n" in
0) echo "zero"
;;
1) echo "un"
;;
2) echo "deux"
echo "deux"
;;
*) echo "autre"
;;
esac
read n
case "$n" in
0) echo "zero"
;;
1) echo "un"
;;
2) echo "deux"
echo "deux"
;;
*) echo "Invalide" 2>&1
exit 1
;;
esac

while/////

while [[ "$count" -le 5 ]]; do
echo "$count"
count=$((count + 1))
done
count=1 aloha

for////

count=1
until [[ "$count" -gt 5 ]]; do
echo "$count"
count=$((count + 1))
done
for (( i=0; i<5; i=i+1 )); do
echo $i
done

for///Expension

count=1
until [[ "$count" -gt 5 ]]; do
echo "$count"
count=$((count + 1))
done
for (( i=0; i<5; i=i+1 )); do
echo $i
done
for i in A B C D; do echo $i; done


example
afficher .sh commancant par s
for i in s*.sh; do echo $i; done //existance

ex2 mtest ra mexiste de affichena
for i in *.sh; do [[ -e "$i" ]]; then echo $i; fi ; done

du --max-depth=0 /home repertoire home raha 0 raha 1  ao anaty home

attao boucle
for i in /home/mamitiana; do du --max-depth=0 $i ;done


exo type

rep1 rep2
rep1 : nombre répertoire dans rep1, nombre fichiers dans rep1, taille rep1

enaro n awk

exercice fishier bash parametre ex ./exo2.sh * ataony argument dol n fichier ao

proba stat, algèbre linéaire, analyse à plusieurs variables, algorithme

enaro stara python sy bash
install anaconda


regex : correction

#!/bin/bash
function verify()
{
        reg="^/((\w|-|_|\.)+/)*+((\w|-|_)*+(\.+[a-z]*)?)?"
        if [[ -z "$1" ]]
        then
                echo "Erreur, c'est vide!"
                exit 1
        else
                if [[ -z "$2" ]]
                then
                        if [[ $1 =~ $reg ]]
                        then
                                rem=${BASH_REMATCH[0]}
                                echo "$1"
                                if [[ $1 == $rem ]]
                                then
                                        echo "Chemin Valide"
                                        exit 0
                                else
                                        echo "Chemin non valide"
                                        exit 1
                                fi
                        else
                                        echo "Chemin non valide"
                                        exit 1
                        fi
                else


enaro  bASH REGEX AWK PYTHON Analyse d algorithme

https://openbookproject.net/thinkcs/python/english3e/
How to Think Like a Computer Scientist
: Learning with Python 3


correction exercices : exo 4 resaka daty
exo 4.4
4. Ecrire un script qui donne le jour de la semaine d'une date donnée.
#!/bin/bash
read -p "Entrer une date (année/mois/jour) : " n
echo $(date -d "$n" +%A)

format jour/mois/annees
$(date -d "$n" '+%d/%m/%Y %r')
ou
read -p "Entrez une date: " n
echo $( date -d "$( date -d "$n" +%F )" +%A  )

resaka daty iany :
exo 4

#read -p "entrer la premiere date (au format YYYY-MM-dd): " date1
#read -p "entrer la deuxieme date (au format YYYY-MM-dd): " date2

sec_date1=$(date --date=$date1 +%s)
sec_date2=$(date --date=$date2 +%s)
#echo "date 1 en sec" $sec_date1
#echo "date 2 en sec" $sec_date2

diff=$((sec_date1-sec_date2))

#if (( "$diff" < 0 ))
#then
#       diff=$((diff*-1))
#fi
#echo "Nombre de jours entre les dates $date1 et $date2 = " $((diff/60/60/24))


exo4, question5 : #!/bin/bash
echo "Saisir les dates d1 et d2 (année/mois/jour) :"
read -p "Date 1 : " d1
read -p "Date 2 : " d2
d1=$(date -d "$d1" +%s);
d2=$(date -d "$d2" +%s);
echo "$((($d2-$d1)/(24*3600))) jours"


exo 4 Quota

#!/bin/bash
quota=15
verifquota(){
        taille=$( du -sh /home/$1 | cut -c -2 )
        if [[ $taille>$quota ]]; then
                echo "vous avez depasser le quota(total consommé: $taille GO)"
        else
                echo "il vous reste $(($quota -  $taille)) GO d'espace memoire"
        fi
}
name=$1
verifquota $name


 exo alpha numerique

1.
alphanum(){
        if [[  $1 =~ ^[[:alnum:]]+$ ]];then
                return 1
        else
                return 0
        fi
}


#alphanum $1
#val=$?
#if (( $val == 1 )); then
#       echo "Contient uniquement des caractères alpha-numériques"
#else
#       echo "Ne contient pas uniquement de caractères alpha-numériques"
#fi

2.
#!/bin/bash
function ifAlnum(){
        if  [ $( echo "$1" | grep -E '^[[:alnum:]]*$' ) ] ; then
                return 0
        else
                return 1
        fi
}

function printRes(){
        if ifAlnum $1; then   
                echo "Argument Valide"
                return 0
        else
                echo "Argument non Valide" 1>&2
                return 1
        fi
}
printRes $1


parameter expansion :

ex : a=2 afaka asina phrase  
echo $a echo "la valeur de a est $a"
ex : echo {a:-"hello if unset"} raha b= tsisy de if unset no valiny (valeur par defaut)
echo $b
ex : ${a:="default value if unset"}
raha tsis val le a de efault if unset no mpotra sady lasa val le a le izy

ex : 
echo ${a:?"error if unset"}
mvoka error standard rehefa mis erreur
echo $? (rah tsisy val  de meesahe alefa erreur standard)
de 1 no valiny (exit 1)

exemple script : positional paramater mila ianarana $1 sy n namany

#!/bin/bash
a=
echo "debut"
echo ${a:?"erreur aucune valeur"}
echo "fin"
(raha tsis valeur le a de ts tonga any @ fin io fa makany @ errur standard(karazana exeption) mtovotov @ exit 1 io  zany)


ex :
echo ${a:+"replace if set"} (raha misy ao de soloiny anio n afficheny eo @ a)(tsy miova n valeur n a)


variable ouan string manokana indray
ex : nom=Julie
echo "${#nom}" length
ex : phrase ="tay be ela" (misy espace isainy)

echo "${nom:2}"
= lie fafany ny Ju
echo "${nom:2:2}"
= li
phrase" coucou tout le monde"
$"{phase: -5:3}" (misy espace avy any @ farany manisa )
= ond

ex :
file=rep.tar.gz
${parameter#pattern}
echo "${file#*.}"
= tar.gz 
ex : file1=nom.txt
echo "${file1#*.}" (ze foy no fafany )
= txt

echo "${file##*.}" (ze lava no alainy no foy no avela contraire zay n ray ray)
= gz 
echo "${file1##*.}"
= txt

ex :
a="stylo,regle,cahier,gomme,trousse"
echo "${a#*,}"
= regle,cahier,gomme,trousse"
echo "${a##*,}"
= trousse

echo "${file%.*}" (avy any @ farany )
= rep

echo "${a%%,*}"
= stylo


echo "${a%,*}"
= stylo,regle,cahier,gomme

${parameter/pattern/replace} (manova replace fa le variable ts miova)
ex : ${a/stylo/crayon}
 = crayon,regle,cahier,gomme,trousse

ex : ${a/regle/crayon}
 = crayon,crayon,cahier,gomme,trousse

ex : ${a/e/A}
 = crayon,rAgle,cahier,gomme,trousse

ex : ${a//e/A}
 = crayon,rAgle,cahiAr,gommA,troussA


TABLEAU :

t[1]=0
t[20]=5
t[10]=hello

echo "${t[1]} ${t[10]} ${t[20]} ${t[2]}"
= 0 hello 5

ex : j=(lundi mardi)

echo "${j[0]} ${j[1]}"
= lundi mardi
echo $j
= lundi

for (( i=0; i<2; i=i+1 )); do
echo "${j[$i]}"
done
=
lundi
mardi

jour=([1]=mardi [0]=lundi [3]=mercredi)
echo mtovy @ le teo iany banga fotsin n index 2

affichage = 
echo ${jour[*]} =lundi mardi mercredi
echo ${jour[@]} =lundi mardi mercredi 


a=("un stylo" "deux crayon" "un cahier")

boucle : for i in ${a[*]};do echo "$i";done
un 
stylo
deux
crayon
un
cahier

boucle : for i in ${a[@]};do echo "$i";done
un 
stylo
deux
crayon
un
cahier


boucle : for i in "${a[@]}";do echo "$i";done (tena miasa)
un stylo
deux crayon
un cahier


boucle : for i in "${a[*]}";do echo "$i";done
un stylo deux crayon un cahier

echo ${#a[@]} manisa length

integer expansion ((..))
echo $((2**3))

n=1
echo $((n++))
echo $n
= 2

n=1
 $((++n))
echo $n
= 3

echo $((n+=10))
13


a+=("une gomme" "une règle")



exo : nbr de jours jusq a un date donné

#!/bin/bash

DATY=$(date -d "$1" + "%s")
CUR=$(date +"%s")

DIFF=$((($DATY-$CUR)/60/60/24))

echo "${DIFF#-} jours" ikany leh #- raha negatif de miala le signe

RESUME NATAO ==== ENARO :

Navigation
Démarrage de Linux
Opérations sur les fichiers et répertoires
Opérations sur les commandes
Redirection
Expansions
Raccourcis clavier
Permissions
Gestion de processus
Vim
Environnement
Gestion de paquets
Recherche de fichiers
Sauvgarde 
Traitement de texte
Script avec Bash


DEVINER LE MOT : mini jeu commande sed subtitution jereo louh substring

#!/bin/bash

essais=10
mot="assistance"
reponse=""

init_answer(){
	for ((i=0; i<${#mot}; i++));do 
		reponse+="-"; 
	done
}

verif_letter(){
	essais=$(($essais-1))
	val=0
	for ((i=0; i<${#mot}; i++));do
		if [[ "$1" == "${mot:$i:1}" ]];then
			index=$(($i+1))
			reponse=$(echo $reponse | sed s/./$1/$index)
			val=1
		fi
	done	
 	[[ $val -eq 1 ]] && echo "Tres bien! la lettre \"$1\" apparait dans le mot!" || echo "Non ! la lettre \"$1\" n'apparait pas dans le mot !"		

}

main(){
	init_answer
	while [[  $reponse != $mot ]]; do
		echo "Nombre d'essais restants : $essais, mot devine: $reponse"
		read -p "Entrer une lettre: " letter
		verif_letter $letter
		echo ""
		[[ $reponse == $mot ]] && echo "BRAVOO!" && break
		[[ $essais -eq 0 ]] && echo "DOMMAGE!" && break
	done
	echo "Votre reponse : $reponse"
	echo "Le mot etait : $mot"
}

main


